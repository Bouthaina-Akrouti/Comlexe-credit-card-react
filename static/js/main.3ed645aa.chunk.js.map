{"version":3,"sources":["Nav.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","className","src","num","slice","delai","nom","toUpperCase","App","handleChange","e","setState","target","name","value","state","number","date","this","type","id","maxlength","placeholder","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oRAwBeA,G,MAtBH,SAACC,GACT,OAEI,yBAAKC,UAAU,OACX,wBAAIA,UAAU,SAAd,gBACA,yBAAKA,UAAU,YAAYC,IAAI,qHAC/B,yBAAKD,UAAU,cACX,yBAAKA,UAAU,SACX,wBAAIA,UAAU,YAAYD,EAAMG,IAAIC,MAAM,EAAG,KAC7C,wBAAIH,UAAU,mBAAmBD,EAAMK,MAAMD,MAAM,EAAE,GAAK,IAAMJ,EAAMK,MAAMD,MAAM,EAAG,IACrF,wBAAIH,UAAU,QAAQD,EAAMM,IAAIC,gBAEpC,yBAAKN,UAAU,OACX,yBAAKA,UAAU,cAAcC,IAAI,gDCmBtCM,EA9Bf,YACE,WAAYR,GAAQ,IAAD,8BACjB,4CAAMA,KAORS,aAAe,SAACC,GACd,EAAKC,SAAL,eAAiBD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,SAP1C,EAAKC,MAAQ,CACXC,OAAQ,GACRC,KAAM,GACNJ,KAAM,IALS,EADrB,sEAcI,OACE,yBAAKZ,UAAU,OACb,yBAAKA,UAAU,QACf,kBAAC,EAAD,CAAKE,IAAKe,KAAKH,MAAMC,OAAQX,MAAOa,KAAKH,MAAME,KAAMX,IAAKY,KAAKH,MAAMF,QAErE,yBAAKZ,UAAU,UACb,2BAAOkB,KAAK,OAAON,KAAK,SAASO,GAAG,SAASC,UAAU,KAAKC,YAAY,cAAcC,SAAUL,KAAKT,eAAsB,6BAC3H,2BAAOU,KAAK,OAAON,KAAK,OAAOO,GAAG,OAAOC,UAAU,IAAIC,YAAY,aAAaC,SAAUL,KAAKT,eAAsB,6BACrH,2BAAOU,KAAK,OAAON,KAAK,OAAOO,GAAG,OAAOC,UAAU,KAAKC,YAAY,cAAcC,SAAUL,KAAKT,qBAtB3G,GAAyBe,aCQLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.3ed645aa.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Nav = (props) => {\r\n    return (\r\n\r\n        <div className=\"nav\">\r\n            <h1 className=\"title\">Company name</h1>\r\n            <img className=\"logo-puce\" src=\"https://making-the-web.com/sites/default/files/clipart/176482/sim-card-png-transparent-images-176482-3736944.png\" />\r\n            <div className=\"items-card\">\r\n                <div className=\"items\">\r\n                    <h2 className=\"num-card\">{props.num.slice(0, 17)}</h2>\r\n                    <h2 className=\"date-expiration\">{props.delai.slice(0,2) + '/' + props.delai.slice(2, 4)}</h2>\r\n                    <h2 className=\"name\">{props.nom.toUpperCase()}</h2>\r\n                </div>\r\n                <div className=\"img\">\r\n                    <img className=\"logo-master\" src=\"https://www.pikolin.si/iimg/3860/i.jpg\"></img>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n\r\n    );\r\n}\r\n\r\nexport default Nav;","import React, { Component } from 'react';\nimport './App.css';\nimport Nav from './Nav';\n\nexport class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      number: \"\",\n      date: \"\",\n      name: \"\"\n    }\n  }\n  handleChange = (e) => {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"card\">\n        <Nav num={this.state.number} delai={this.state.date} nom={this.state.name} />\n        </div>\n        <div className=\"inputs\">\n          <input type=\"text\" name=\"number\" id=\"number\" maxlength=\"16\" placeholder='Card number' onChange={this.handleChange}></input><br />\n          <input type=\"text\" name=\"date\" id=\"date\" maxlength=\"4\" placeholder='Valid thru' onChange={this.handleChange}></input><br />\n          <input type=\"text\" name=\"name\" id=\"name\" maxlength=\"20\" placeholder='Card holder' onChange={this.handleChange}></input>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}